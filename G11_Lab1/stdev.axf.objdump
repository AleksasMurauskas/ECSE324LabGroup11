
//campus.mcgill.ca/emf/SWE/bkella/My Documents/ECSE 324/G11_Lab1/stdev.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start
// LDR -> 

_start:
			LDR R4, =RESULT  // R4 points to result location
   0:	e59f4074 	ldr	r4, [pc, #116]	; 7c <NUMBERS+0x1c>
			LDR R2, [R4, #4] // R2 holds the number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8   // R3 points to the first number
   8:	e2843008 	add	r3, r4, #8
			LDR R0, [R3]	 // R0 -> MAX OF LIST
   c:	e5930000 	ldr	r0, [r3]
			LDR R5, [R3]	 // R5 -> MIN OF LIST
  10:	e5935000 	ldr	r5, [r3]

00000014 <LOOP>:
			

LOOP:		SUBS R2, R2, #1  // decrement the loop counter
  14:	e2522001 	subs	r2, r2, #1
			BEQ DONE		 // end loop if counter has reached 0
  18:	0a00000a 	beq	48 <DONE>
			ADD R3, R3, #4   // R3 points to next num in list
  1c:	e2833004 	add	r3, r3, #4
			LDR R1, [R3]	 // R1 -> CURRENT NUMBER
  20:	e5931000 	ldr	r1, [r3]
			B CHECKMAX		 // Initially check for max
  24:	eaffffff 	b	28 <CHECKMAX>

00000028 <CHECKMAX>:

CHECKMAX:	CMP R0, R1		// Perform R0 (MAX) - R1 (CURRENT). Store result into condition code
  28:	e1500001 	cmp	r0, r1
			BGE CHECKMIN	// Branch to CHECKMIN if condition code > 0
  2c:	aa000001 	bge	38 <CHECKMIN>
			MOV R0, R1		// Update R0 (MAX) with R1 (CURRENT)
  30:	e1a00001 	mov	r0, r1
			B LOOP			// Branch to LOOP
  34:	eafffff6 	b	14 <LOOP>

00000038 <CHECKMIN>:

CHECKMIN:	CMP R1, R5		// Perform R1 (CURRENT) - R5 (MIN). Store result into condition code
  38:	e1510005 	cmp	r1, r5
			BGE LOOP		// Branch to LOOP if condition code > 0
  3c:	aafffff4 	bge	14 <LOOP>
			MOV R5, R1		// Update R5 (MIN) with R1 (CURRENT)
  40:	e1a05001 	mov	r5, r1
			B LOOP			// Branch to LOOP
  44:	eafffff2 	b	14 <LOOP>

00000048 <DONE>:
				

DONE:		SUB R2, R0, R5   // Perform R2 = R0 (MAX) - R5 (MIN) 
  48:	e0402005 	sub	r2, r0, r5
			ASR R2, R2, #2	 // Perform R2>>=2 (Equiv to R2/=4)
  4c:	e1a02142 	asr	r2, r2, #2
			STR R2, [R4]     // store R2 (Standard deviation) to the memory location		
  50:	e5842000 	str	r2, [r4]

00000054 <END>:

END:		B END			 // infinite loop!
  54:	eafffffe 	b	54 <END>

00000058 <RESULT>:
  58:	00000000 	.word	0x00000000

0000005c <N>:
  5c:	00000007 	.word	0x00000007

00000060 <NUMBERS>:
  60:	0000000a 	.word	0x0000000a
  64:	00000028 	.word	0x00000028
  68:	00000017 	.word	0x00000017
  6c:	00000003 	.word	0x00000003
  70:	000003e8 	.word	0x000003e8
  74:	00000020 	.word	0x00000020
  78:	00000005 	.word	0x00000005
  7c:	00000058 	.word	0x00000058
