
//campus.mcgill.ca/emf/SWE/bkella/My Documents/ECSE 324/G11_Lab2/fib.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start


_start:
			LDR R4, =RESULT		 // R4 points to result location
   0:	e59f405c 	ldr	r4, [pc, #92]	; 64 <N+0x4>
			LDR R0, [R4, #4]	 // R0 = Nth Fibonacci number to calculate
   4:	e5940004 	ldr	r0, [r4, #4]
			BL FIB				 // Perform branch and link to FIB routine
   8:	eb000001 	bl	14 <FIB>
			STR R0, [R4]		 // Store result from fibonacci routine at RESULT memory location
   c:	e5840000 	str	r0, [r4]
			B END				 // Branch to end
  10:	ea000010 	b	58 <END>

00000014 <FIB>:
// 	if n < 2:
// 		return 1

FIB: // Fib(R0) -> Return the nth Fibonacci number in R0.
	 // 	R0 -> Nth Fibonacci number to calculate to
			PUSH {R4-R12,LR} // Save state of the processor before entering sub-routine
  14:	e92d5ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
			CMP R0, #2		 // Compare R0 to 2 (I.E. perform R0 - 2 and store in CPSR)
  18:	e3500002 	cmp	r0, #2
			BGE RECURSE 	 // if (n >= 2) { goto RECURSE }
  1c:	aa000002 	bge	2c <RECURSE>
			MOV  R0, #1		 // R0 = 1 (Set return value to 1)
  20:	e3a00001 	mov	r0, #1
			POP {R4-R12,LR}	 // Restore state of processor before exiting sub-routine
  24:	e8bd5ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
			BX LR			 // Branch to LR
  28:	e12fff1e 	bx	lr

0000002c <RECURSE>:
RECURSE:	SUB R4, R0, #1	 // R4 = R0 - 1
  2c:	e2404001 	sub	r4, r0, #1
			SUB R5, R0, #2   // R5 = R0 - 2
  30:	e2405002 	sub	r5, r0, #2
			MOV R0, R4		 // R0 = R4 = (n-1)
  34:	e1a00004 	mov	r0, r4
			BL FIB			 // Recursively call Fib(R0) (Or Fib(n-1))
  38:	ebfffff5 	bl	14 <FIB>
			MOV R4, R0		 // R4 = R0 (n-1)th fubibacci number
  3c:	e1a04000 	mov	r4, r0
			MOV R0, R5		 // R0 = R5 = (n-2)
  40:	e1a00005 	mov	r0, r5
			BL FIB			 // Recursively call Fib(R0) (Or Fib(n-2))
  44:	ebfffff2 	bl	14 <FIB>
			MOV R5, R0		 // R5 = R0 (n-2)th fibonacci number
  48:	e1a05000 	mov	r5, r0
			ADD R0, R4, R5   // R0 = R4 + R5 (Eq: Fib (n-1) + Fib (n-2))
  4c:	e0840005 	add	r0, r4, r5
			POP {R4-R12,LR}	 // Restore state of processor before exiting sub-routine
  50:	e8bd5ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
			BX LR			 // Branch to LR
  54:	e12fff1e 	bx	lr

00000058 <END>:

END:		B END			 // Infinite loop
  58:	eafffffe 	b	58 <END>

0000005c <RESULT>:
  5c:	00000000 	.word	0x00000000

00000060 <N>:
  60:	00000005 	.word	0x00000005
  64:	0000005c 	.word	0x0000005c
